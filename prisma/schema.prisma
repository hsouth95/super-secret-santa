// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  secretSantas  SecretSanta[]
  participants  Participant[]
}

model SecretSanta {
  id              String        @id @default(cuid())
  name            String
  presentsOpening DateTime?
  drawDate        DateTime?
  userId          String
  owner           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants    Participant[]

  @@index([userId])
}

model Participant {
  id               String        @id @default(cuid())
  name             String
  email            String?
  connectedAccount Boolean       @default(false)
  secretSantaId    String
  secretSanta      SecretSanta   @relation(fields: [secretSantaId], references: [id], onDelete: Cascade)
  userId           String?
  user             User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  giftingToId      String?       @unique
  giftingTo        Participant?  @relation("Gifting", fields: [giftingToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  giftingFrom      Participant?  @relation("Gifting")
  excluded         Participant[] @relation("Excluded")
  excludedBy       Participant[] @relation("Excluded")

  @@index([secretSantaId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
